#!/bin/bash

set -e
set -o pipefail

#APP_TARBALL="$1"
APP_PATH="<%= locals.remote_app_path %>"
PULLPREVIEW_ENV_FILE="/etc/pullpreview/env"

GITHUB_TOKEN="$1"
GITHUB_REPO="$2"
GITHUB_SHA="$3"

lock_file="/tmp/update.lock"
cleanup() {
  rm -f "$lock_file"
  #rm -f "$APP_TARBALL"
}

trap cleanup EXIT INT TERM

if [ -f "$lock_file" ]; then
  echo "Previous operation in progress. Waiting for at most 20min before proceeding..."

  for i in {1..240}; do
    sleep 5
    if [ ! -f "$lock_file" ]; then
      break
    fi
    echo "Waiting..."
  done
fi

if [ -f "$lock_file" ]; then
  echo "Previous operation considered in error. Forcing new operation to start..."
  lock_cleanup
fi

exec 100>$lock_file || exit 1
echo -n "Acquiring lock before proceeding... "
flock -n 100 || exit 1
echo "OK"

sudo chown -R ec2-user.ec2-user "$(dirname $PULLPREVIEW_ENV_FILE)"

if [ -f "$PULLPREVIEW_ENV_FILE" ]; then
  PULLPREVIEW_FIRST_RUN=false
  rm -f "$PULLPREVIEW_ENV_FILE"
else
  PULLPREVIEW_FIRST_RUN=true
fi

echo 'PULLPREVIEW_PUBLIC_DNS=<%= locals.public_dns %>' >> $PULLPREVIEW_ENV_FILE
echo 'PULLPREVIEW_PUBLIC_IP=<%= locals.public_ip %>' >> $PULLPREVIEW_ENV_FILE
echo 'PULLPREVIEW_URL=<%= locals.url %>' >> $PULLPREVIEW_ENV_FILE
echo "PULLPREVIEW_FIRST_RUN=$PULLPREVIEW_FIRST_RUN" >> $PULLPREVIEW_ENV_FILE

set -o allexport
source $PULLPREVIEW_ENV_FILE
set +o allexport

cd /


echo "Updating dependencies..."
sudo yum-config-manager --add-repo https://cli.github.com/packages/rpm/gh-cli.repo
sudo yum update -y -q -e 0 || true
sudo yum install gh perl-Digest-SHA -y -q -e 0

#sudo rm -rf "$APP_PATH"
#tar xzf "$1" -C "$APP_PATH"

echo "Checking out latest code..."

echo "$GITHUB_TOKEN" > /tmp/github_token
gh auth login --with-token < /tmp/github_token
rm -f /tmp/github_token

if [ ! -f $APP_PATH/README.md ]; then
  echo "Cloning repo..."
  sudo mkdir -p "$APP_PATH"
  sudo chown -R ec2-user.ec2-user "$APP_PATH"
  gh repo clone $GITHUB_REPO "$APP_PATH";
fi

cd "$APP_PATH"
gh auth setup-git

REMOTE_REF=$(echo $GITHUB_REF | sed -e  's/refs\//refs\/remotes\//')

git fetch --no-tags --prune --progress --no-recurse-submodules --depth=1 origin +$GITHUB_SHA:$REMOTE_REF
git checkout $GITHUB_SHA

if ! /tmp/pre_script.sh ; then
  echo "Failed to run the pre-script"
  exit 1
fi

# These checksums are ultimately passed as Dockerfile args, which will trigger
# rebuilds at specific stages when these files change, as opposed to restarting the build from scratch

PACKAGE_LOCK_CHECKSUM=$(shasum $APP_PATH/app/package-lock.json | awk '{print $1}');
PRISMA_SCHEMA_CHECKSUM=$(shasum $APP_PATH/app/packages/kiefa-db/prisma/schema.prisma | awk '{print $1}');

echo "PACKAGE_LOCK_CHECKSUM IS $PACKAGE_LOCK_CHECKSUM"
echo "PRISMA_SCHEMA_CHECKSUM IS $PRISMA_SCHEMA_CHECKSUM"

COMPOSE_HTTP_TIMEOUT=300 PACKAGE_LOCK_CHECKSUM=$(shasum $APP_PATH/app/package-lock.json | awk '{print $1}') PRISMA_SCHEMA_CHECKSUM=$(shasum $APP_PATH/app/packages/kiefa-db/prisma/schema.prisma | awk '{print $1}')  docker-compose <%= locals.compose_files.map{|f| ["-f", f.inspect]}.flatten.join(" ") %> up \
	--build \
	--remove-orphans \
	-d

sleep 10
docker-compose <%= locals.compose_files.map{|f| ["-f", f.inspect]}.flatten.join(" ") %> logs --tail 10000
